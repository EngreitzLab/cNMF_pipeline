# The main entry point of your workflow.
# After configuring, running snakemake -n in a clone of this repository should successfully execute a dry-run of the workflow.
import os
import pandas as pd
# from sympy import expand

# configfile: "config/config.json"

# report: "report/workflow.rst"

# Allow users to fix the underlying OS via singularity.
# singularity: "docker://continuumio/miniconda3"

# ## manually load config file (for snakemake kubernetes on google cloud)
# with open("/oak/stanford/groups/engreitz/Users/kangh/TeloHAEC_Perturb-seq_2kG/230104_snakemake_WeissmanLabData/config.gcloud.json", "r") as f:
#     config = json.load(f)

# include: "/oak/stanford/groups/engreitz/Users/kangh/cNMF_pipeline/workflow/rules/cNMF_pipeline.smk"
include: "rules/cNMF_pipeline.smk"
include: "rules/program_prioritization.smk"
if config["Perturb-seq"] == "True":
	include: "rules/cNMF_Perturb-seq_analysis.smk"

if not os.path.isfile(config["fimo_formatted"]):
	include: "rules/match_motifs.smk"


def get_output_files(wildcards):
	output_files = []

	h5ad_mtx = expand(os.path.join(config["analysisDir"], "data/{sample}.h5ad"), sample=config["sampleName"]),
	gene_name_txt = expand(os.path.join(config["analysisDir"], "data/{sample}.h5ad.all.genes.txt"), sample=config["sampleName"]),
	# seurat_object_withUMAP = expand(os.path.join(config["analysisDir"], "data/{sample}.withUMAP_SeuratObject.RDS"), sample=config["sampleName"]),
	usages = expand(os.path.join(config["analysisDir"],"{folder}_acrossK/{sample}/{sample}.usages.k_{k}.dt_{threshold}.consensus.txt"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]]),
	findK_plot_cNMF = expand(os.path.join(config["figDir"],"{folder}/{sample}/acrossK/{sample}.k_selection.png"), folder = config["cNMF_gene_selection"], sample=config["sampleName"]),

	aggregated_output = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/acrossK/aggregated.outputs.findK.RData"), folder = config["cNMF_gene_selection"], sample=config["sampleName"]),
		
	## variance explained
	Var_k_txt = expand(os.path.join(config["analysisDir"],"{folder}/{sample}/K{k}/threshold_{threshold}/metrics.varianceExplained.df.txt"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]]),
	Var_k_summary_txt = expand(os.path.join(config["analysisDir"],"{folder}/{sample}/K{k}/threshold_{threshold}/summary.varianceExplained.df.txt"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]]),

	## motif enrichment preparation
	fimo_result = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/fimo/fimo_out/fimo.txt"), folder = config["cNMF_gene_selection"], sample=config["sampleName"]),

	## main results
	cNMF_Results = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/cNMF_results.k_{k}.dt_{threshold}.RData"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]]),
	topic_zscore_top50 = expand(os.path.join(config["figDir"], "{folder}/{sample}/K{k}/{sample}_K{k}_dt_{threshold}_top50GeneInTopics.zscore.pdf"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]]),
	topic_zscore_correlation = expand(os.path.join(config["figDir"], "{folder}/{sample}/K{k}/{sample}_K{k}_dt_{threshold}_topic.Pearson.correlation.pdf"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]]),
	motif_table = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/{ep_type}.topic.top.300.zscore.gene_motif.count.ttest.enrichment_motif.thr.{motif_match_thr}_k_{k}.dt_{threshold}.txt"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]], ep_type = ["enhancer", "promoter"], motif_match_thr = ["qval0.1", "pval1e-4", "pval1e-6"]),
	motif_plot = expand(os.path.join(config["figDir"], "{folder}/{sample}/K{k}/{sample}_K{k}_dt_{threshold}_zscore.{ep_type}.motif.{test_type}_motif.thr.{motif_match_thr}.pdf"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]], ep_type = ["enhancer", "promoter"], test_type = ["count.ttest.enrichment"], motif_match_thr = ["qval0.1", "pval1e-4", "pval1e-6"]),
	# motif_plot = expand(os.path.join(config["figDir"], "{folder}/{sample}/K{k}/{sample}_K{k}_dt_{threshold}_zscore.{ep_type}.motif.enrichment{test_type_and_threshold}.pdf"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]], ep_type = ["enhancer", "promoter"], test_type_and_threshold = ["", "_motif.thr.10e-6", ".by.count.ttest", ".by.count.ttest_motif.thr.10e-6", ".by.count.ttest.labelPos", ".by.count.ttest_motif.thr.10e-6.labelPos"]),
	# fgsea_result = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/fgsea/fgsea_all_pathways_df_{ranking_type}_k_{k}.dt_{threshold}.RData"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]], ranking_type=["raw.score", "z.score"]),
	# clusterProfiler_top300Gene_GO_result = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/clusterProfiler_top300Genes{ranking_type_here}_GOEnrichment.txt"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]], ranking_type_here = ["zscore", "raw"]),
	# clusterProfiler_allGeneWeight_gsea_result = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/clusterProfiler_allGene{ranking_type_here}_ByWeight_GSEA.txt"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]], ranking_type_here = ["zscore", "raw"]),
	# clusterProfiler_top300Gene_gsea_result = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/clusterProfiler_top300Genes{ranking_type_here}_GSEA.txt"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]], ranking_type_here = ["zscore", "raw"]),
	clusterProfiler_result = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/clusterProfiler_GeneRankingType{ranking_type}_EnrichmentType{GSEA_type}.txt"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]], ranking_type = ["zscore"], GSEA_type = ["GOEnrichment", "PosGenesGOEnrichment", "ByWeightGSEA", "GSEA"]), ## skipping ranking_type = "raw"
	# factor_expression_UMAP = expand(os.path.join(config["figDir"], "{folder}/{sample}/K{k}/{sample}_K{k}_dt_{threshold}_Factor.Expression.UMAP.pdf"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]]),
	# GO_raw_plot = expand(os.path.join(config["figDir"], "{folder}/{sample}/acrossK/GO.enrichment.on.raw.score.ranking.threshold0.1.pdf"), folder = config["cNMF_gene_selection"], sample=config["sampleName"]),
	gsea_clusterProfiler_plot = expand(os.path.join(config["figDir"], "{folder}/{sample}/K{k}/{sample}_K{k}_dt_{threshold}_top10EnrichedPathways_GeneRankingType{ranking_type}_EnrichmentType{GSEA_type}.pdf"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]], ranking_type = ["zscore", "raw", "median_spectra", "median_spectra_zscore"], GSEA_type = ["GOEnrichment", "PosGenesGOEnrichment", "ByWeightGSEA", "GSEA"]),

	## Program Summary Table
	ProgramSummary = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/{sample}_ProgramSummary_k_{k}.dt_{threshold}.txt"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]]),

	## PoPS
	all_features_RDS = os.path.join(config["analysisDir"], "pops/features/processed_features/full_external_features.RDS"),
	all_features_with_cNMF_RDS=expand(os.path.join(config["analysisDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/pops/full_features_{magma_prefix}_cNMF{k}.RDS"), folder=config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]], magma_prefix=config["magma_prefix"]),
	feature_x_gene_importance_score_RDS = expand(os.path.join(config["scratchDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/pops/{magma_prefix}_cNMF{k}_coefs.marginals.feature.outer.prod.RDS"), folder=config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]], magma_prefix=config["magma_prefix"]),
	feature_x_gene_component_importance_score_coefs_plot = expand(os.path.join(config["figDir"], "{folder}/{sample}/K{k}/{magma_prefix}_cNMF{k}_dt_{threshold}_feature_x_gene.component.importance.score.coefs.pdf"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]], magma_prefix=config["magma_prefix"]),

	## Across K
	clustering_plot = expand(os.path.join(config["analysisDir"],"{folder}_acrossK/{sample}/{sample}.clustering.k_{k}.dt_{threshold}.png"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]]),
	topic_clustering_plot = expand(os.path.join(config["figDir"], "{folder}/{sample}/acrossK/cluster.topic.zscore.by.Pearson.corr.pdf"), folder = config["cNMF_gene_selection"], sample=config["sampleName"])
 	GSEA_plots = expand(os.path.join(config["figDir"], "{folder}/{sample}/acrossK/All_GSEA.pdf"), folder = config["cNMF_gene_selection"], sample=config["sampleName"]),
	TFMotifEnrichment_plots = expand(os.path.join(config["figDir"], "{folder}/{sample}/acrossK/All_TFMotifEnrichment.pdf"), folder = config["cNMF_gene_selection"], sample=config["sampleName"]),

	## Program Prioritization for Perturb-seq
	program_prioritization_statistical_test_result = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/program_prioritization_{regulator_analysis_type}/{GWAS_trait}/{GWAS_trait}.program_prioritization.txt"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]], GWAS_trait = config["GWAS_traits"], regulator_analysis_type = ["GWASWide", "GenomeWide"]),
	program_prioritization_plot = expand(os.path.join(config["figDir"], "{folder}/{sample}/K{k}/program_prioritization_{regulator_analysis_type}/{GWAS_trait}/{sample}_K{k}_dt_{threshold}_{GWAS_trait}_ProgramGene_EnrichmentBarPlot.pdf"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]], GWAS_trait = config["GWAS_traits"], regulator_analysis_type = ["GWASWide", "GenomeWide"]),

	## IGVF file format outputs
	model_yaml = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/IGVF_format/{sample}.k_{k}.dt_{threshold}.modelYAML.yaml"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]]),
	# model_yaml = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/{sample}.yaml"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]]),
	cellxgene_h5ad = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/IGVF_format/{sample}.k_{k}.dt_{threshold}.cellxgene.h5ad"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]]),
	# cellxgene_h5ad = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/IGVF_format/{sample}.cellxgene.h5ad"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]]),

	## outputs
	output_files.extend(list(h5ad_mtx))
	# output_files.extend(list(gene_name_txt))

	# output_files.extend(list(usages))
	output_files.extend(list(findK_plot_cNMF))
	output_files.extend(list(aggregated_output))
	output_files.extend(list(Var_k_txt))
	output_files.extend(list(Var_k_summary_txt))
	output_files.extend(list(cNMF_Results))
	# output_files.extend(list(topic_zscore_top50))
	output_files.extend(list(topic_zscore_correlation))
	# output_files.extend(list(motif_table))
	# output_files.extend(list(motif_plot))
	output_files.extend(list(gsea_clusterProfiler_plot)) ## single K
	output_files.extend(list(clusterProfiler_result)) ## rule: clusterProfiler_GSEA, across K plots
	output_files.extend(list(GSEA_plots))
	output_files.extend(list(TFMotifEnrichment_plots))
	# output_files.extend(list(model_yaml))
	# output_files.extend(list(cellxgene_h5ad))
	# output_files.extend(list(ProgramSummary))
	# output_files.extend(list(clusterProfiler_top300Gene_GO_result))
	# output_files.extend(list(clusterProfiler_allGeneWeight_gsea_result))
	# output_files.extend(list(clusterProfiler_top300Gene_gsea_result))
	# output_files.extend(list(fgsea_result))

	# # ## PoPS
	# # output_files.extend(list(feature_x_gene_importance_score_RDS)) ## add this for analyze_PoPS_results rule
	# # output_files.extend(list(feature_x_gene_component_importance_score_coefs_plot))
	# output_files.extend(list(program_prioritization_statistical_test_result))
	# output_files.extend(list(program_prioritization_plot))

	if not os.path.isfile(config["fimo_formatted"]):
		output_files.extend(list(fimo_result))


	if config["Perturb-seq"] == "True":
		batch_correlation_pdf = expand(os.path.join(config["figDir"], "{folder}/{sample}/K{k}/{sample}_K{k}_dt_{threshold}_batch.correlation.heatmap.pdf"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]]),
		percent_batch_topics_plot = expand(os.path.join(config["figDir"], "{folder}/{sample}/acrossK/percent.batch.topics.pdf"), folder = config["cNMF_gene_selection"], sample=config["sampleName"]),
		batch_topic_list = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/batch.topics.txt"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]]),

		## motif enrichment
		# motif_plot_perturbseq = expand(os.path.join(config["figDir"], "{folder}/{sample}/K{k}/{sample}_K{k}_dt_{threshold}_zscore.{ep_type}.motif.{test_type_and_threshold}.pdf"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]], ep_type = ["enhancer", "promoter"], test_type_and_threshold = ["count.ttest.enrichment_motif.thr.qval0.1"]),
		
		## Statistical Test
		# cNMF_Analysis = expand(os.path.join(config["analysisDir"], "{sample}/{folder}/K{k}/threshold_{threshold}/cNMFAnalysis.k_{k}.dt_{threshold}.RData"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]]),
		wilcoxon_txt_results = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/all.test.k_{k}.dt_{threshold}.minGuidePerPtb_{min_guide_per_ptb}.minCellPerGuide_{min_cell_per_guide}.txt"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]], min_guide_per_ptb = [1], min_cell_per_guide = [2]),
		MAST_txt_result = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/K{k}/threshold_{threshold}/{sample}_MAST_DEtopics.txt"), folder = config["cNMF_gene_selection"], sample=config["sampleName"], k=config["k"], threshold=[n.replace(".","_") for n in config["thresholds"]]),

		## aggregated across K results for Perturb-seq
		aggregated_output_perturbseq = expand(os.path.join(config["analysisDir"], "{folder}/{sample}/acrossK/aggregated.outputs.findK.perturb-seq.RData"), folder = config["cNMF_gene_selection"], sample=config["sampleName"]),


		output_files.extend(list(batch_correlation_pdf))
		output_files.extend(list(percent_batch_topics_plot)) ## rule: findK_plot_perturb_seq
		output_files.extend(list(batch_topic_list))
		# output_files.extend(list(motif_plot_perturbseq))
		# output_files.extend(list(wilcoxon_txt_results)) ## rule: perturbation_analysis
		output_files.extend(list(MAST_txt_result)) ## rule: MAST
		output_files.extend(list(aggregated_output_perturbseq)) ## need MAST result


	all_output = []
	for output_list in output_files:
		for item in output_list:
			all_output.extend([item])

	# print(all_output)
	# print(output_files)
	return all_output


rule all:
	input: get_output_files
	# params:
	# 	mem_gb: "36"





 	#